When first starting the project I wasn’t show on how to go about this. I didn’t know how to organize all these functions. The shape tools should be on the right along with the stroke JcomboBox and the fill check box. The Line tool is the free draw tool and works like a brush. The save Button and the Clear button are part of the file JMenu. The clear button is known as "new".  I have two animations that play for the non "free hand" draw shapes "forward and Back" and "up and down" . When you change the animation it will pause. The next time you press play it will animate the one you selected. I first started with just the minimum classes but then I noticed my ArtPanel becoming too big. I decided to try to make a bunch of ActionListener classes to lessen it. When I first started out I looked fooled around a bit with the real life paint. I didn’t know whether my clear button should be a Jbutton or a JmenuItem. When I played with the real paint, I noticed that the "new" button in the file menu was the one that cleared the panel. I ended up making the "new" button in the file JMenu the one that clears the panel. The most difficult task I had was the mouse actions that required the right mouse clicked. The First thing that happened was that my shapes weren’t deleting when I double right clicked. When I made the "MouseAdapter" classes separate from the panel, I made it so that the "ArtMod"(the variable carrying all of my "ShapeProperties” items) was adding to the new shapes while I was dragging it. I found out that if I only added to ArtMod on "mouseReleased" they delete. However if I did that then I wouldn’t be able to see the shape getting drawn. So I ended up using two lists; one for drawing and one for keeping the shapes in display. The Second difficult task for me was getting the free draw tool (which is the line tool) to move while I dragged it. The shape I was trying to move wasn’t an instance of  "RectangularShape" so I couldn’t use the setframe method. I tried using the moveTo method and the get2DBounds() method but it wouldn’t budge. I ended up using the transform method for 2Dgraphics. For my extra credit I created a paint tool that draws a path that mirrors your own.