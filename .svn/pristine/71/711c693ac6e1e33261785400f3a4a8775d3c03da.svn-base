/**
 * 
 */
package view;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import controller.RectangleMouser;
import model.ArtModel;
import model.ShapeProperties;

/**
 * @author athenac
 *
 */
public class ArtPanel extends JPanel{
    /** A ToolKit. */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();

    /** The Dimension of the screen. */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();

    /** The width of the screen. */
    private static final int SCREEN_WIDTH = (int) (SCREEN_SIZE.width * 0.80);

    /** The height of the screen. */
    private static final int SCREEN_HEIGHT = (int)(SCREEN_SIZE.height * 0.80);

    /** The default size for this JPanel. */
    private static final Dimension DEFUALT_SIZE = new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT);
    /**
     * The first point.
     */
    private Point myP1;
    /**
     * The second point.
     */
    private Point myP2;
    /**
     * Keeps track of the shapes drawn.
     */
    private List<ShapeProperties> myShapesList;
    /**
     * Path where the line is being drawn.
     */
    private GeneralPath myDoodle;
    /**
     * 
     */
    private List<Shape> myList;
    private Color color; // stores color used to draw fractal
    /**
     * 
     */
    private Shape myShape;
    private ArtModel myArtMod;
    
    final RectangleMouser rect;
    boolean flag;
    private final MouseAdapter myDefaultListener;
    //final RectangleMouser rect;
    /**
     * Construct this JPanel.
     * 
     * @custom.post white panel of a quarter of a screen size constructed
     */
    public ArtPanel() {
        super();
        setPreferredSize(DEFUALT_SIZE);
        setBackground(Color.WHITE);
        color = Color.BLACK;
        myP1 = new Point();
        myP2 = new Point();
        myShapesList = new ArrayList<ShapeProperties>();
        myList = new ArrayList<Shape>();
        myArtMod = new ArtModel(myShapesList);
        myDefaultListener = new Mouser();
        flag = false;
        rect = new RectangleMouser(this, myArtMod, color,flag);
        addMouseListener(myDefaultListener);
        addMouseMotionListener(myDefaultListener);
    }
    /**
     * 
     */
    public MouseAdapter RectangleMouser(){
        return rect;
        
    }
    /**
     * 
     */
    /** {@inheritDoc} */
    @Override
    public void paintComponent(final Graphics thePen) {
        super.paintComponent(thePen);
        final Graphics2D pen = (Graphics2D) thePen;
        //pen.setColor(color);
        //keeps shape on display
        List<ShapeProperties> myList;
        myList = myArtMod.getList();
       for (ShapeProperties i: myList) {
            pen.setColor(i.getColor());
            pen.draw(i.getShape());
            if(i.getFlag()){
                pen.fill(i.getShape());
            }
        } 
        
        //shows doodle being drawn
        if (myDoodle != null) {
            pen.setColor(color);
            pen.draw(myDoodle);
            
        }
        //shows shapes being drawn.
        if(myShape != null){
            pen.setColor(color);
            pen.draw(myShape);
        }
        
    }
    /**
     * 
     */
    public void setColor(Color c){
        color = c;
        rect.setColor(c);
        
    }
    /**
     * 
     */
    public void setFlag(boolean b){
        flag = b;
        rect.setFlag(b);
    }
    /**
     * 
     * @param m
     */
    public void resetMouseListener(MouseAdapter m){
        removeMouseListener(myDefaultListener);
        removeMouseMotionListener(myDefaultListener);
        addMouseListener(m);
        addMouseMotionListener(m);
        
    }
    /**
     * 
     */
    private class Mouser extends MouseAdapter {

        /**
         * Where the doodle starts.
         * @param theEvent where the mouse is pressed.
         */
        @Override
        public void mousePressed(final MouseEvent theEvent) {

            myP1.setLocation(theEvent.getX(), theEvent.getY());
            myP2.setLocation(theEvent.getX(), theEvent.getY());;
            
            if(SwingUtilities.isLeftMouseButton(theEvent)){
                myDoodle = new GeneralPath();
                myDoodle.moveTo(myP1.getX(), myP1.getY());
            }else{
                myDoodle = null;
            }
            
            

            // TODO Auto-generated method stub

        }
        /**
         * @param theEvent the even happening.
         * @custom.post Shape added once mouse is released.
         */
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            // trying to capture the point where mouse is released.

            //keeps doodle to display.
            if(myDoodle != null){
                ShapeProperties shape = new ShapeProperties(myDoodle, color);
                //shape.setFlag(flag);
                myArtMod.add(shape);
            }
            myDoodle = null;


        }

        /**
         * Creats the line as the mouse is dragged.
         * @param theEvent the event happening.
         */
        public void mouseDragged(final MouseEvent theEvent) {

            myP1.setLocation(theEvent.getX(), theEvent.getY());



            myP2.setLocation(theEvent.getX(), theEvent.getY());
            final Line2D.Double line =
                            new Line2D.Double(myP1.getX(), myP2.getY(), myP2.getX(),
                                              myP2.getY());
            if(myDoodle != null){
                myDoodle.append(line, true);
            }
            repaint();
        }

    }

    private class MouseMove extends MouseAdapter {
        
    }
}
