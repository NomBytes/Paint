/**
 * 
 */
package view;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

/**
 * @author athenac
 *
 */
public class ArtPanel extends JPanel{
    /** A ToolKit. */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();

    /** The Dimension of the screen. */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();

    /** The width of the screen. */
    private static final int SCREEN_WIDTH = SCREEN_SIZE.width / 2;

    /** The height of the screen. */
    private static final int SCREEN_HEIGHT = SCREEN_SIZE.height / 2;

    /** The default size for this JPanel. */
    private static final Dimension DEFUALT_SIZE = new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT);
    /**
     * The first point.
     */
    private Point myP1;
    /**
     * The second point.
     */
    private Point myP2;
    /**
     * Keeps track of the shapes drawn.
     */
    private List<Shape> myShapesList;
    /**
     * Path where the line is being drawn.
     */
    private GeneralPath myShape;

    /**
     * Construct this JPanel.
     * 
     * @custom.post white panel of a quarter of a screen size constructed
     */
    public ArtPanel() {
        super();
        setPreferredSize(DEFUALT_SIZE);
        setBackground(Color.WHITE);
        myP1 = new Point();
        myP2 = new Point();
        myShapesList = new ArrayList<Shape>();  
        final Mouser m = new Mouser();
        addMouseListener(m);
        addMouseMotionListener(m);
    }

    /** {@inheritDoc} */
    @Override
    public void paintComponent(final Graphics thePen) {
        super.paintComponent(thePen);
        final Graphics2D pen = (Graphics2D) thePen;
        //keeps shape on display
        for (int i = 0; i < myShapesList.size(); i++) {
            pen.setColor(Color.BLUE);
            pen.draw(myShapesList.get(i));
        }
        
        //shows shapes being drawn.
        if (myShape != null) {
            pen.setColor(Color.BLUE);
            pen.draw(myShape);
            
        }
        
    }

    /**
     * 
     */
    private class Mouser extends MouseAdapter {

        /**
         * Where the doodle starts.
         * @param theEvent where the mouse is pressed.
         */
        @Override
        public void mousePressed(final MouseEvent theEvent) {

            myP1.setLocation(theEvent.getX(), theEvent.getY());
            myP2.setLocation(theEvent.getX(), theEvent.getY());;

            myShape = new GeneralPath();
            myShape.moveTo(myP1.getX(), myP1.getY());
            

            // TODO Auto-generated method stub

        }
        /**
         * @param theEvent the even happening.
         * @custom.post Shape added once mouse is released.
         */
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            // trying to capture the point where mouse is released.

            //keeps doodle to display.
            myShapesList.add(myShape);


        }

        /**
         * Creats the line as the mouse is dragged.
         * @param theEvent the event happening.
         */
        public void mouseDragged(final MouseEvent theEvent) {

            myP1.setLocation(theEvent.getX(), theEvent.getY());



            myP2.setLocation(theEvent.getX(), theEvent.getY());
            final Line2D.Double line =
                            new Line2D.Double(myP1.getX(), myP2.getY(), myP2.getX(),
                                              myP2.getY());

            myShape.append(line, true);
            repaint();
        }

    }
}
